<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="30 seconds" debug="true">

    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!-- <property name="LOG_DIR" value="C:/workspace/ETS/logs" /> -->
    <property name="LOG_DIR" value="./logs" />
    <property name="LOG_LEVEL" value="debug" />
    <!-- <property name="LOG_FILENAME" value="${LOG_DIR}/debug" /> -->
    <property name="LOG_FILENAME" value="${LOG_DIR}/gnumall" />

    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.PatternLayout">
            <Pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%thread] %-5level [%logger{36}.%method:%line] - %msg %n</Pattern>
        </encoder>
    </appender>
    <appender name="file"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_FILENAME}.log</file>
        <rollingPolicy
                class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILENAME}.%d{yyyy-MM-dd_HH}.%i.log
            </fileNamePattern>
            <maxFileSize>200MB</maxFileSize>
            <!-- 6일 지난 파일은 삭제한다. -->
            <maxHistory>14</maxHistory>
            <totalSizeCap>2GB</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%thread] %-5level [%logger{36}.%method:%line] - %msg %n</pattern>
        </encoder>
    </appender>

    <!-- RULES for logging TRACE > DEBUG > INFO > WARN > ERROR -->
    <!-- SQL 결과 조회된 데이터의 table을 로그로 남긴다. -->
    <logger name="jdbc.resultsettable" additivity="false">
        <level value="error" />
        <appender-ref ref="console" />
        <appender-ref ref="file" />
    </logger>

    <!--  SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함한다. -->
    <logger name="jdbc.sqltiming" additivity="false">
        <level value="${LOG_LEVEL}" />
        <appender-ref ref="console" />
        <appender-ref ref="file" />
    </logger>

    <!-- resultset 을 제외한 모든 JDBC 호출 정보를 로그로 남긴다. 많은 양의 로그가 생성되므로 특별히  JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고는 사용을 권장하지 않는다. -->
    <logger name="jdbc.audit" additivity="false">
        <level value="error" />
        <appender-ref ref="console" />
        <appender-ref ref="file" />
    </logger>

    <!--  ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 양의 로그가 생성된다. -->
    <logger name="jdbc.resultset" additivity="false">
        <level value="error" />
        <appender-ref ref="console" />
        <appender-ref ref="file" />
    </logger>
    <logger name="jdbc.connection" additivity="false">
        <level value="error" />
        <appender-ref ref="console" />
        <appender-ref ref="file" />
    </logger>
    <logger name="log4jdbc.debug" additivity="false">
        <level value="error" />
        <appender-ref ref="console" />
        <appender-ref ref="file" />
    </logger>

    <!-- 배포 시 level 변경 -->
    <!--  SQL 쿼리 문장만 로그로 남긴다. PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여진다. -->
    <logger name="jdbc.sqlonly" additivity="false">
        <level value="${LOG_LEVEL}" />
        <appender-ref ref="console" />
        <appender-ref ref="file" />
    </logger>

    <logger name="org.springframework" additivity="false">
        <level value="WARN" />
        <appender-ref ref="console" />
        <appender-ref ref="file" />
    </logger>

    <!-- Root Logger -->
    <root>
        <level value="${LOG_LEVEL}" />
        <appender-ref ref="console" />
        <appender-ref ref="file" />
    </root>

</configuration>